{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toString","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,QACpB,mCAAMN,EAAMI,QAAQG,cCLbC,G,MAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8FDG,E,kDAzEb,aAAe,IAAD,8BACZ,gBA4BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA5BtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAYO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAEL,OAAOA,EAAIC,UAEZF,MAAK,SAACG,GAEL,EAAKT,SAAS,CAAET,SAAUkB,S,+BAavB,MAG2BC,KAAKN,MAA/Bb,EAHD,EAGCA,SAAUU,EAHX,EAGWA,YAGZU,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACvCA,EAAQE,KACLyB,WACAC,cACAC,SAASd,EAAYY,WAAWC,kBAiBrC,OACE,sBAAK/B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAxEVK,aCfHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.61c9c9ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className='card-container'>\r\n      <img\r\n        alt='monster'\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h1> {props.monster.name}</h1>\r\n      <h2> {props.monster.email}</h2>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n//props the parameter we get from our functional component\r\n// will send a single monster to the card it to be displayed.\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n// functional component is used to render html\r\n// gets some props and returns html\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className='search'\r\n      type='search'\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components//search-box/search-box.component';\n\n// function App() {\n// return (\n// <div className=\"App\">\n// <header className=\"App-header\">\n// <img src={logo} className=\"App-logo\" alt=\"logo\" />\n// <p> Hello My Name is Sefa.\n// <br/>\n// Edit <code>src/App.js</code> and save to reload.\n// </p>\n// <a\n// className=\"App-link\"\n// href=\"https://reactjs.org\"\n// target=\"_blank\"\n// rel=\"noopener noreferrer\"\n// >\n// Learn React\n// </a>\n// </header>\n// </div>\n// );\n// }\n\nclass App extends Component {\n  // constructor allows access to super() which gives access to this.state={}\n  // will allow to set to a default\n  // when ever you see '{}' in a tag it mean that what ever is in between\n  // there is java script\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: [],\n    };\n    // telling java script what to do for the custom handleChange method\n    // .bind\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  //is to put the component on the page\n  // fetch from a url\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((res) => {\n        //  console.log(res)\n        return res.json();\n      })\n      .then((users) => {\n        // console.log(users);\n        this.setState({ monsters: users });\n      });\n  }\n\n  // customs/class method  handleChange method\n  // we uses EX 6 arrow function and the unique characteristics about them\n  // ()=>{}\n  // when it see this in parameters of the functions it will\n  // automatically bind what is after 'this' to the parameter in the arrow function..\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    // destructuring will allows us to pull properties of\n    // an object and set them to the const that is in side of '{}'\n    const { monsters, searchField } = this.state;\n\n    // includes() just check the value that was passed to see if it exits in the array.\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name\n        .toString()\n        .toLowerCase()\n        .includes(searchField.toString().toLowerCase())\n    );\n\n    // map() returns to the us the return of whatever function we pas to it.\n    // iterated over ever element\n    // this send the value the monster state to the card list\n    // this.state.monsters\n    // update .....\n    //the new code is to help us update dom for search\n    // sending user input to the search component\n\n    /*   Going to write a method that does this because there a time where \n       i would need it on diffident values\n      handleChange={(e) => {\n      this.setState({ searchField: e.target.value });\n    }}\n    */\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}